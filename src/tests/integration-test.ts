#!/usr/bin/env node
/**
 * TradeSphere Integration Testing
 * 
 * Verifies that pipeline implementations correctly integrate with:
 * - service-database.ts configurations
 * - Google Sheets row mappings  
 * - Real pricing calculations
 * - Existing system components
 * 
 * Usage:
 *   npm run test:integration
 *   tsx src/tests/integration-test.ts
 */

import { PipelineFactory } from '../services/pipeline/PipelineFactory';
import { 
  SERVICE_DATABASE, 
  SERVICE_SYNONYMS, 
  getServiceByName,
  findServiceBySynonym,
  getAllServices,
  getServicesByCategory,
  isSpecialService,
  SHEETS_CONFIG 
} from '../config/service-database';
import { PipelineResult } from '../services/pipeline/interfaces';

interface IntegrationTest {
  name: string;
  testFunction: () => Promise<IntegrationTestResult>;
  description: string;
  critical: boolean;
}

interface IntegrationTestResult {
  passed: boolean;
  issues: string[];
  details: any;
  executionTime: number;
}

class IntegrationTester {

  /**
   * Run comprehensive integration tests
   */
  async runIntegrationTests(): Promise<void> {
    console.log('üîó INTEGRATION TESTING SUITE');
    console.log('============================');
    console.log('üéØ Verifying pipeline integration with existing systems');
    console.log('üìä Testing service database, row mappings, and calculations\n');

    const tests: IntegrationTest[] = [
      {
        name: 'Service Database Integrity',
        testFunction: () => this.testServiceDatabaseIntegrity(),
        description: 'Verify service database has all 32 expected services with correct configurations',
        critical: true
      },
      {
        name: 'Synonym Pattern Matching',
        testFunction: () => this.testSynonymPatternMatching(),
        description: 'Test that pipeline can find services using synonym patterns',
        critical: true
      },
      {
        name: 'Row Number Accuracy',
        testFunction: () => this.testRowNumberAccuracy(),
        description: 'Verify pipeline uses correct Google Sheets row numbers',
        critical: true
      },
      {
        name: 'Unit Conversion Integration',
        testFunction: () => this.testUnitConversionIntegration(),
        description: 'Test that pipeline handles unit variations correctly',
        critical: true
      },
      {
        name: 'Special Service Handling',
        testFunction: () => this.testSpecialServiceHandling(),
        description: 'Verify irrigation and other special services are handled properly',
        critical: true
      },
      {
        name: 'Pipeline-Database Connectivity',
        testFunction: () => this.testPipelineDatabaseConnectivity(),
        description: 'Test that pipeline implementations can access service database',
        critical: true
      },
      {
        name: 'Google Sheets Configuration',
        testFunction: () => this.testGoogleSheetsConfig(),
        description: 'Verify Google Sheets configuration is properly integrated',
        critical: false
      },
      {
        name: 'End-to-End Service Resolution',
        testFunction: () => this.testEndToEndServiceResolution(),
        description: 'Test complete flow from input text to service database lookup',
        critical: true
      }
    ];

    let passedTests = 0;
    let criticalFailures = 0;
    const results: Array<{ test: IntegrationTest; result: IntegrationTestResult }> = [];

    for (const test of tests) {
      console.log(`üß™ ${test.name}`);
      console.log(`üìù ${test.description}`);
      
      const startTime = Date.now();
      try {
        const result = await test.testFunction();
        result.executionTime = Date.now() - startTime;
        results.push({ test, result });
        
        if (result.passed) {
          passedTests++;
          console.log(`‚úÖ PASS: ${test.name} (${result.executionTime}ms)`);
        } else {
          if (test.critical) criticalFailures++;
          console.log(`‚ùå FAIL: ${test.name} (${result.executionTime}ms)`);
          result.issues.forEach(issue => console.log(`    üîç ${issue}`));
        }
        
      } catch (error) {
        const result: IntegrationTestResult = {
          passed: false,
          issues: [`Test execution failed: ${error.message}`],
          details: {},
          executionTime: Date.now() - startTime
        };
        results.push({ test, result });
        
        if (test.critical) criticalFailures++;
        console.log(`‚ùå ERROR: ${test.name} (${result.executionTime}ms)`);
        console.log(`    üí• ${error.message}`);
      }
      
      console.log(''); // Empty line
    }

    this.generateIntegrationSummary(tests.length, passedTests, criticalFailures, results);
  }

  /**
   * Test service database integrity
   */
  private async testServiceDatabaseIntegrity(): Promise<IntegrationTestResult> {
    const issues: string[] = [];
    const details: any = {};

    // Check expected service count (32)
    const services = getAllServices();
    details.serviceCount = services.length;
    
    if (services.length !== 32) {
      issues.push(`Expected 32 services, found ${services.length}`);
    }

    // Check for duplicate row numbers
    const rowNumbers = Object.values(SERVICE_DATABASE).map(s => s.row);
    const duplicateRows = rowNumbers.filter((row, index) => rowNumbers.indexOf(row) !== index);
    
    if (duplicateRows.length > 0) {
      issues.push(`Duplicate row numbers found: ${duplicateRows.join(', ')}`);
    }

    // Check row number sequence (should be 2-33)
    const expectedRows = Array.from({ length: 32 }, (_, i) => i + 2);
    const missingRows = expectedRows.filter(row => !rowNumbers.includes(row));
    
    if (missingRows.length > 0) {
      issues.push(`Missing row numbers: ${missingRows.join(', ')}`);
    }

    // Check required fields for each service
    for (const [serviceName, config] of Object.entries(SERVICE_DATABASE)) {
      if (!config.row || !config.unit || !config.category) {
        issues.push(`Service "${serviceName}" missing required fields`);
      }
      
      if (config.row < 2 || config.row > 33) {
        issues.push(`Service "${serviceName}" has invalid row number: ${config.row}`);
      }
    }

    // Check category distribution
    const categories = Object.values(SERVICE_DATABASE).map(s => s.category);
    const categoryCount = categories.reduce((counts, cat) => {
      counts[cat] = (counts[cat] || 0) + 1;
      return counts;
    }, {} as Record<string, number>);
    
    details.categoryDistribution = categoryCount;

    return {
      passed: issues.length === 0,
      issues,
      details,
      executionTime: 0
    };
  }

  /**
   * Test synonym pattern matching
   */
  private async testSynonymPatternMatching(): Promise<IntegrationTestResult> {
    const issues: string[] = [];
    const details: any = { testCases: [] };

    const testCases = [
      { input: 'mulch', expectedService: 'Triple Ground Mulch (SQFT)' },
      { input: 'wood chips', expectedService: 'Triple Ground Mulch (SQFT)' },
      { input: 'paver patio', expectedService: 'Paver Patio (SQFT)' },
      { input: 'sprinklers', expectedService: 'Irrigation (per zone)' },
      { input: 'metal edging', expectedService: 'Metal Edging' },
      { input: 'topsoil', expectedService: 'Topsoil (CUYD)' },
      { input: 'small tree', expectedService: 'Small Tree (<2in Caliper)' },
      { input: 'retaining wall', expectedService: '5' Retaining Wall (LNFTXSQFT)' }
    ];

    for (const testCase of testCases) {
      const foundService = findServiceBySynonym(testCase.input);
      const testResult = {
        input: testCase.input,
        expected: testCase.expectedService,
        found: foundService,
        passed: foundService === testCase.expectedService
      };
      
      details.testCases.push(testResult);
      
      if (!testResult.passed) {
        issues.push(`Input "${testCase.input}" should find "${testCase.expectedService}", found "${foundService}"`);
      }
    }

    // Test that all services have at least one synonym
    const servicesWithoutSynonyms = getAllServices().filter(serviceName => 
      !Object.keys(SERVICE_SYNONYMS).includes(serviceName)
    );
    
    if (servicesWithoutSynonyms.length > 0) {
      issues.push(`Services without synonyms: ${servicesWithoutSynonyms.slice(0, 3).join(', ')}${servicesWithoutSynonyms.length > 3 ? '...' : ''}`);
      details.servicesWithoutSynonyms = servicesWithoutSynonyms.length;
    }

    return {
      passed: issues.length === 0,
      issues,
      details,
      executionTime: 0
    };
  }

  /**
   * Test row number accuracy
   */
  private async testRowNumberAccuracy(): Promise<IntegrationTestResult> {
    const issues: string[] = [];
    const details: any = {};

    // Test specific known services and their row numbers
    const knownServices = [
      { name: 'Triple Ground Mulch (SQFT)', expectedRow: 23 },
      { name: 'Metal Edging', expectedRow: 21 },
      { name: 'Paver Patio (SQFT)', expectedRow: 2 },
      { name: 'Irrigation Set Up Cost', expectedRow: 15 },
      { name: 'Irrigation (per zone)', expectedRow: 16 }
    ];

    details.knownServiceTests = [];

    for (const service of knownServices) {
      const config = getServiceByName(service.name);
      const testResult = {
        serviceName: service.name,
        expectedRow: service.expectedRow,
        actualRow: config?.row,
        passed: config?.row === service.expectedRow
      };
      
      details.knownServiceTests.push(testResult);
      
      if (!config) {
        issues.push(`Service "${service.name}" not found in database`);
      } else if (config.row !== service.expectedRow) {
        issues.push(`Service "${service.name}" has row ${config.row}, expected ${service.expectedRow}`);
      }
    }

    // Test that row numbers are in valid Google Sheets range
    const invalidRows = Object.entries(SERVICE_DATABASE)
      .filter(([, config]) => config.row < 2 || config.row > 50)
      .map(([name, config]) => ({ name, row: config.row }));

    if (invalidRows.length > 0) {
      details.invalidRows = invalidRows;
      issues.push(`Services with invalid row numbers: ${invalidRows.length}`);
    }

    return {
      passed: issues.length === 0,
      issues,
      details,
      executionTime: 0
    };
  }

  /**
   * Test unit conversion integration
   */
  private async testUnitConversionIntegration(): Promise<IntegrationTestResult> {
    const issues: string[] = [];
    const details: any = { conversionTests: [] };

    // Test common unit variations
    const unitTests = [
      { input: 'sq ft', expected: 'sqft' },
      { input: 'square feet', expected: 'sqft' },
      { input: 'linear feet', expected: 'linear_feet' },
      { input: 'cubic yards', expected: 'cubic_yards' },
      { input: 'each', expected: 'each' }
    ];

    for (const test of unitTests) {
      // This would test unit conversion if implemented
      details.conversionTests.push({
        input: test.input,
        expected: test.expected,
        // Note: Actual conversion logic would be tested here
        passed: true // Placeholder
      });
    }

    // Check that all service units are valid
    const validUnits = ['sqft', 'linear_feet', 'each', 'palette', 'cubic_yards', 'section', 'setup', 'zone'];
    const invalidUnitServices = Object.entries(SERVICE_DATABASE)
      .filter(([, config]) => !validUnits.includes(config.unit))
      .map(([name, config]) => ({ name, unit: config.unit }));

    if (invalidUnitServices.length > 0) {
      details.invalidUnits = invalidUnitServices;
      issues.push(`Services with invalid units: ${invalidUnitServices.length}`);
    }

    return {
      passed: issues.length === 0,
      issues,
      details,
      executionTime: 0
    };
  }

  /**
   * Test special service handling
   */
  private async testSpecialServiceHandling(): Promise<IntegrationTestResult> {
    const issues: string[] = [];
    const details: any = {};

    // Find services marked as special
    const specialServices = Object.entries(SERVICE_DATABASE)
      .filter(([, config]) => config.special === true)
      .map(([name]) => name);

    details.specialServices = specialServices;

    // Test isSpecialService function
    for (const serviceName of specialServices) {
      if (!isSpecialService(serviceName)) {
        issues.push(`Service "${serviceName}" should be marked as special but isSpecialService returns false`);
      }
    }

    // Test that irrigation services are properly marked
    const irrigationServices = getServicesByCategory('irrigation');
    details.irrigationServices = irrigationServices;

    for (const irrigationService of irrigationServices) {
      if (!isSpecialService(irrigationService)) {
        issues.push(`Irrigation service "${irrigationService}" should be marked as special`);
      }
    }

    // Check that special services have appropriate configurations
    if (irrigationServices.length !== 2) {
      issues.push(`Expected 2 irrigation services, found ${irrigationServices.length}`);
    }

    return {
      passed: issues.length === 0,
      issues,
      details,
      executionTime: 0
    };
  }

  /**
   * Test pipeline-database connectivity
   */
  private async testPipelineDatabaseConnectivity(): Promise<IntegrationTestResult> {
    const issues: string[] = [];
    const details: any = {};

    try {
      // Test that pipeline can access service database functions
      const testInput = '45 square feet of triple ground mulch';
      
      // Test mock pipeline
      const mockPipeline = PipelineFactory.createMock(false);
      const mockResult = await mockPipeline.process(testInput);
      
      details.mockPipelineConnectivity = {
        success: mockResult.success,
        servicesFound: mockResult.finalResult?.services.length || 0,
        hasRowNumbers: mockResult.finalResult?.services.every(s => s.row > 0) || false
      };

      if (!mockResult.success) {
        issues.push('Mock pipeline failed to process test input');
      }

      if (mockResult.finalResult?.services.length === 0) {
        issues.push('Mock pipeline found no services for test input');
      }

      // Check that services have row numbers (indicating database integration)
      const servicesWithoutRows = mockResult.finalResult?.services.filter(s => !s.row || s.row === 0) || [];
      if (servicesWithoutRows.length > 0) {
        issues.push(`${servicesWithoutRows.length} services missing row numbers`);
      }

      // Test development pipeline
      const devPipeline = PipelineFactory.createDevelopment();
      const devResult = await devPipeline.process(testInput);
      
      details.devPipelineConnectivity = {
        success: devResult.success,
        servicesFound: devResult.finalResult?.services.length || 0,
        hasRowNumbers: devResult.finalResult?.services.every(s => s.row > 0) || false
      };

    } catch (error) {
      issues.push(`Pipeline connectivity test failed: ${error.message}`);
    }

    return {
      passed: issues.length === 0,
      issues,
      details,
      executionTime: 0
    };
  }

  /**
   * Test Google Sheets configuration
   */
  private async testGoogleSheetsConfig(): Promise<IntegrationTestResult> {
    const issues: string[] = [];
    const details: any = {};

    // Check that configuration is properly structured
    details.sheetsConfig = {
      hasSpreadsheetId: !!SHEETS_CONFIG.spreadsheetId,
      hasSpreadsheetName: !!SHEETS_CONFIG.spreadsheetName,
      hasRanges: !!SHEETS_CONFIG.ranges
    };

    if (!SHEETS_CONFIG.spreadsheetName) {
      issues.push('Missing spreadsheet name in configuration');
    }

    if (!SHEETS_CONFIG.ranges) {
      issues.push('Missing ranges configuration');
    } else {
      const requiredRanges = ['input', 'labor', 'cost', 'totals', 'clear'];
      for (const range of requiredRanges) {
        if (!SHEETS_CONFIG.ranges[range]) {
          issues.push(`Missing range configuration for: ${range}`);
        }
      }
    }

    // Note: We don't test actual Google Sheets connectivity here to avoid API calls
    details.note = 'Google Sheets API connectivity not tested to avoid external dependencies';

    return {
      passed: issues.length === 0,
      issues,
      details,
      executionTime: 0
    };
  }

  /**
   * Test end-to-end service resolution
   */
  private async testEndToEndServiceResolution(): Promise<IntegrationTestResult> {
    const issues: string[] = [];
    const details: any = { testCases: [] };

    const testCases = [
      {
        input: '45 square feet of mulch',
        expectedServiceName: 'Triple Ground Mulch (SQFT)',
        expectedRow: 23,
        expectedUnit: 'sqft'
      },
      {
        input: '3 feet of metal edging',
        expectedServiceName: 'Metal Edging',
        expectedRow: 21,
        expectedUnit: 'linear_feet'
      }
    ];

    for (const testCase of testCases) {
      try {
        const pipeline = PipelineFactory.createMock(false);
        const result = await pipeline.process(testCase.input);
        
        const testResult: any = {
          input: testCase.input,
          success: result.success,
          servicesFound: result.finalResult?.services.length || 0
        };

        if (result.success && result.finalResult?.services.length > 0) {
          const service = result.finalResult.services[0];
          testResult.foundServiceName = service.serviceName;
          testResult.foundRow = service.row;
          testResult.foundUnit = service.unit;
          testResult.foundQuantity = service.quantity;
          
          // Validate service name
          if (service.serviceName !== testCase.expectedServiceName) {
            issues.push(`Input "${testCase.input}": Expected service "${testCase.expectedServiceName}", found "${service.serviceName}"`);
          }
          
          // Validate row number
          if (service.row !== testCase.expectedRow) {
            issues.push(`Input "${testCase.input}": Expected row ${testCase.expectedRow}, found ${service.row}`);
          }
          
          // Validate unit
          if (service.unit !== testCase.expectedUnit) {
            issues.push(`Input "${testCase.input}": Expected unit "${testCase.expectedUnit}", found "${service.unit}"`);
          }
          
          testResult.passed = service.serviceName === testCase.expectedServiceName &&
                             service.row === testCase.expectedRow &&
                             service.unit === testCase.expectedUnit;
        } else {
          testResult.passed = false;
          issues.push(`Input "${testCase.input}": Pipeline failed to resolve service`);
        }

        details.testCases.push(testResult);
        
      } catch (error) {
        issues.push(`End-to-end test failed for "${testCase.input}": ${error.message}`);
      }
    }

    return {
      passed: issues.length === 0,
      issues,
      details,
      executionTime: 0
    };
  }

  /**
   * Generate integration test summary
   */
  private generateIntegrationSummary(
    totalTests: number, 
    passedTests: number, 
    criticalFailures: number,
    results: Array<{ test: IntegrationTest; result: IntegrationTestResult }>
  ): void {
    console.log('üìä INTEGRATION TEST SUMMARY');
    console.log('============================');

    const successRate = (passedTests / totalTests) * 100;
    
    console.log(`Tests Passed: ${passedTests}/${totalTests} (${successRate.toFixed(0)}%)`);
    console.log(`Critical Failures: ${criticalFailures}`);
    
    const avgExecutionTime = results.reduce((sum, r) => sum + r.result.executionTime, 0) / results.length;
    console.log(`Average Execution Time: ${avgExecutionTime.toFixed(0)}ms`);

    // Overall assessment
    console.log('\nüéØ INTEGRATION ASSESSMENT:');
    
    if (criticalFailures === 0 && successRate >= 90) {
      console.log('‚úÖ EXCELLENT: All critical integrations working properly');
    } else if (criticalFailures === 0 && successRate >= 75) {
      console.log('‚úÖ GOOD: Critical systems integrated, minor issues exist');
    } else if (criticalFailures <= 2) {
      console.log('‚ö†Ô∏è CAUTION: Some critical integration issues found');
    } else {
      console.log('‚ùå CRITICAL: Major integration failures detected');
    }

    // Show failing critical tests
    const failedCriticalTests = results
      .filter(r => r.test.critical && !r.result.passed)
      .map(r => r.test.name);

    if (failedCriticalTests.length > 0) {
      console.log('\nüö® CRITICAL FAILURES:');
      failedCriticalTests.forEach(testName => {
        console.log(`  ‚ùå ${testName}`);
      });
    }

    // Integration health score
    const healthScore = Math.max(0, 100 - (criticalFailures * 25) - ((totalTests - passedTests) * 10));
    console.log(`\nüìà Integration Health Score: ${healthScore}/100`);

    if (healthScore < 70) {
      console.log('\nüîß RECOMMENDATIONS:');
      console.log('‚Ä¢ Fix critical integration failures before deployment');
      console.log('‚Ä¢ Review service database configurations');
      console.log('‚Ä¢ Verify pipeline-database connectivity');
      console.log('‚Ä¢ Test Google Sheets integration manually');
    }
  }
}

/**
 * Command line interface
 */
async function main() {
  const tester = new IntegrationTester();
  
  try {
    console.log('üîó Starting Integration Testing...\n');
    await tester.runIntegrationTests();
    
    console.log('\n‚úÖ Integration testing completed');
    process.exit(0);
    
  } catch (error) {
    console.error('‚ùå Integration testing failed:', error);
    process.exit(1);
  }
}

// Help
if (process.argv.includes('--help')) {
  console.log(`
TradeSphere Integration Tester

Purpose: Verify pipeline integration with service database and existing systems

Usage:
  tsx src/tests/integration-test.ts    # Run all integration tests
  npm run test:integration             # Run via npm script

What this tests:
  ‚úÖ Service database integrity (32 services, correct rows)
  ‚úÖ Synonym pattern matching functionality  
  ‚úÖ Google Sheets row number accuracy
  ‚úÖ Unit conversion and validation
  ‚úÖ Special service handling (irrigation, etc.)
  ‚úÖ Pipeline-database connectivity
  ‚úÖ End-to-end service resolution

Exit codes:
  0: All critical integrations working
  1: Critical integration failures detected
`);
  process.exit(0);
}

// Run if called directly
if (process.argv[1] && process.argv[1].endsWith('integration-test.ts')) {
  main();
}

export { IntegrationTester };